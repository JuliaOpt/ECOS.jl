using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, String["libecos"], :ecos),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/juan-pablo-vielma/ECOSBuilder/releases/download/v2.0.6-beta2"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, :glibc) => ("$bin_prefix/ECOSBuilder.v2.0.6.aarch64-linux-gnu.tar.gz", "78ed4ea64e3eae3fa460453314f9e889deeb40e5047378e745cf8019db576cea"),
    Linux(:aarch64, :musl) => ("$bin_prefix/ECOSBuilder.v2.0.6.aarch64-linux-musl.tar.gz", "ee7c8e088602e3d60cded23ddfb0fb4db76498c851741e72c49f1eb91e774526"),
    Linux(:armv7l, :glibc, :eabihf) => ("$bin_prefix/ECOSBuilder.v2.0.6.arm-linux-gnueabihf.tar.gz", "000a1e879f6f00a1756ed69368ac0544be4a01343205451712b3b28aae567ed3"),
    Linux(:armv7l, :musl, :eabihf) => ("$bin_prefix/ECOSBuilder.v2.0.6.arm-linux-musleabihf.tar.gz", "22f7dfd08a674e78d7ba22b6b789e1c7723709bca3d8ff56647f0a0a8ffd92d6"),
    Linux(:i686, :glibc) => ("$bin_prefix/ECOSBuilder.v2.0.6.i686-linux-gnu.tar.gz", "cce2f205a1e794b30d863f76366d4c8ed3e0bfdb0a83f470e22a91a10028eecd"),
    Linux(:i686, :musl) => ("$bin_prefix/ECOSBuilder.v2.0.6.i686-linux-musl.tar.gz", "f260005e14b21e6801215f7696c1c4a4345ea581f8aa7c9ecd4173af3017ad65"),
    Windows(:i686) => ("$bin_prefix/ECOSBuilder.v2.0.6.i686-w64-mingw32.tar.gz", "ddc255c50e562e4119b123f401e8538ea79d62e19db2096527369259a4d7f504"),
    Linux(:powerpc64le, :glibc) => ("$bin_prefix/ECOSBuilder.v2.0.6.powerpc64le-linux-gnu.tar.gz", "5f81bd0b2b8c950d99dd630927b9475ef1a56529bfeab7bfee0f138fc0acdbe0"),
    MacOS(:x86_64) => ("$bin_prefix/ECOSBuilder.v2.0.6.x86_64-apple-darwin14.tar.gz", "3c877640dd9e28238216a1bc7b8a5f6be13f5ef6cac4875f9b9761d3eb86490b"),
    Linux(:x86_64, :glibc) => ("$bin_prefix/ECOSBuilder.v2.0.6.x86_64-linux-gnu.tar.gz", "319fdc4545f9309649a57f9ca01d73db9248540783011b7db82b3bb00f04f6e8"),
    Linux(:x86_64, :musl) => ("$bin_prefix/ECOSBuilder.v2.0.6.x86_64-linux-musl.tar.gz", "6cd1f9458b07c35ae466f2dc1f5021640a0fb7037315a6512ff73028e2a072d8"),
    FreeBSD(:x86_64) => ("$bin_prefix/ECOSBuilder.v2.0.6.x86_64-unknown-freebsd11.1.tar.gz", "4f1a86d99d1e88aa35171addf2cb2a6eb503f6698fc5d8ba18511aa43ad96a1f"),
    Windows(:x86_64) => ("$bin_prefix/ECOSBuilder.v2.0.6.x86_64-w64-mingw32.tar.gz", "0202aaaf8e9a9ab614dd1bbe1de3e18124e069a6614c59f1d0871210a665bec7"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
if unsatisfied && haskey(download_info, platform_key())
    url, tarball_hash = download_info[platform_key()]
    if !isinstalled(url, tarball_hash; prefix=prefix) # This check may be redundant
        # Download and install binaries
        install(url, tarball_hash; prefix=prefix, force=true, verbose=verbose)
    end
elseif unsatisfied
    # If we don't have a BinaryProvider-compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform $(triplet(platform_key())) is not supported by this package!")
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
